% Used for HKUST ELEC 5660

close all;
clear all;
clc;
addpath('./utils','./readonly');

path1 = [0.0 0.0 0.0 ; ...
        0.0 0.0 1.0 ; ...
        1.0 1.0 1.0 ; ...
        -1.0 2.3 1.0 ; ...
        1.0 3.0 1.4 ; ...
        -1.6 4.0 1.0 ; ...
        1.0 5.3 1.0 ; ...
        -1.0 6.9 1.0 ; ...
        1.0 7.1 1.0 ; ...
        -1.4 8.0 1.0 ; ...
        1.0 9.0 1.6 ;]; % given path with 11 points

path2 = [0.0 0.0 0.0 ; ...
        1.0 1.0 0.0 ; ...
        -1.0 1.0 2.0 ; ...
        -1.0 -1.0 2.0 ; ...
        1.0 -1.0 2.0 ; ...
        0.0 0.0 4.0 ; ...
        3.0 2.7 4.0 ; ...
        1.0 2.0 6.0 ; ...
        0.0 0.0 6.0 ; ...
        1.0 1.0 6.0 ]; % Given path with 10 points

path3 = [0.0 0.0 0.0 ; ...
        0.0 -2.0 1.5 ; ...
        0.0 -4.0 3.0 ; ...
        0.0 -6.0 1.5 ; ...
        0.0 -6.0 0.0; ...
        2.0 -6.0 1.5 ; ...
        5.0 -6.0 3.0; ...
        5.0 -4.0 1.5 ; ...
        5.0 -2.0 0.0 ; ...
        5.0 0.0 1.5 ; ...
        5.0 0.0 3.0; ...
        5.0 -6.0 0.0]; % Figure U with 12 points

path4 = [0.0 0.0 0.0 ; ...
        0.0 -6.0 -1.0; ...
        5.0 -6.0 3.0; ...
        5.0 0.0 1.5 ;...
        5.0 -6.0 5.0]; % Figure U with 5 points

path5 = 0.5.*[0.0 0.0 0.0 ; ...
        2.5 5.0 3.0 ; ...
        5.0 10.0 5.0 ; ...
        10.0 0.0 0.0 ; ...
        0.0 5.0 5.0 ; ...
        10 6.0 0.0]; % Figure A with 6 points

path6 = [0.0 0.0 0.0 ; ...
        5.0 -10.0 5.0 ; ...
        10.0 0.0 0.0 ;]; % Figure V with 3 points


h1 = subplot(3,4,1);
h2 = subplot(3,4,2);
h3 = subplot(3,4,3);
h4 = subplot(3,4,4);
h5 = subplot(3,4,6);
h6 = subplot(3,4,7);
h7 = subplot(3,4,8);
h8 = subplot(3,4,10);
h9 = subplot(3,4,11);
% h10 = subplot(3,4,12);
set(gcf, 'Renderer', 'painters');
set(gcf, 'Position', [100, 100, 1400, 1000]);
% set(gcf, 'WindowStyle','Modal');


% Trajectory Generator
switch 1 % Enter the number of the path you want to test (1-5)
        case 1
                trajectory_generator([], path1);
        case 2
                trajectory_generator([], path2);
        case 3
                trajectory_generator([], path3);
        case 4
                trajectory_generator([], path4);
        case 5
                trajectory_generator([], path5);
        case 6
                trajectory_generator([], path6);
end

% Run Trajectory
run_trajectory_readonly(h1, h2, h3, h4, h5, h6, h7, h8, h9);

calculate_RMSE=@(a,b) sqrt(mean((a(:)-b(:)).^2));
calculate_RMSE_yaw=@(a,b) sqrt(mean(wrapToPi((a(:)-b(:))).^2));

global current_states
global desired_states
rmse_p = calculate_RMSE(current_states(:,1:3),desired_states(:,1:3));
rmse_v = calculate_RMSE(current_states(:,4:6),desired_states(:,4:6));
rmse_yaw = rad2deg(calculate_RMSE_yaw(current_states(:,7),desired_states(:,7)));

disp(['RMSE Position(m):',num2str(rmse_p)])
disp(['RMSE Velocity(m/s):',num2str(rmse_v)])
disp(['RMSE Yaw(deg):',num2str(rmse_yaw)])